// Code generated by 'go generate'; DO NOT EDIT.

package xsyscall

import (
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var _ unsafe.Pointer

// Do the interface allocations only once for common
// Errno values.
const (
	errnoERROR_IO_PENDING = 997
)

var (
	errERROR_IO_PENDING error = syscall.Errno(errnoERROR_IO_PENDING)
	errERROR_EINVAL     error = syscall.EINVAL
)

// errnoErr returns common boxed Errno values, to prevent
// allocations at runtime.
func errnoErr(e syscall.Errno) error {
	switch e {
	case 0:
		return errERROR_EINVAL
	case errnoERROR_IO_PENDING:
		return errERROR_IO_PENDING
	}
	// TODO: add more here, after collecting data on the common
	// error values see on Windows. (perhaps when running
	// all.bat?)
	return e
}

var (
	modntdll = windows.NewLazySystemDLL("ntdll.dll")

	procEtwEventWrite               = modntdll.NewProc("EtwEventWrite")
	procEtwEventWriteFull           = modntdll.NewProc("EtwEventWriteFull")
	procEtwpCreateEtwThread         = modntdll.NewProc("EtwpCreateEtwThread")
	procNtAllocateVirtualMemory     = modntdll.NewProc("NtAllocateVirtualMemory")
	procNtQueryInformationProcess   = modntdll.NewProc("NtQueryInformationProcess")
	procNtQueueApcThreadEx          = modntdll.NewProc("NtQueueApcThreadEx")
	procNtWriteVirtualMemory        = modntdll.NewProc("NtWriteVirtualMemory")
	procRtlCopyBytes                = modntdll.NewProc("RtlCopyBytes")
	procRtlCopyMemory               = modntdll.NewProc("RtlCopyMemory")
	procRtlEthernetAddressToStringA = modntdll.NewProc("RtlEthernetAddressToStringA")
	procRtlEthernetStringToAddressA = modntdll.NewProc("RtlEthernetStringToAddressA")
	procRtlIpv4AddressToStringA     = modntdll.NewProc("RtlIpv4AddressToStringA")
	procRtlIpv4StringToAddressA     = modntdll.NewProc("RtlIpv4StringToAddressA")
)

func EtwEventWrite(regHandle windows.Handle, eventDescriptor uintptr, userDataCount uint32, userData uintptr) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall6(procEtwEventWrite.Addr(), 4, uintptr(regHandle), uintptr(eventDescriptor), uintptr(userDataCount), uintptr(userData), 0, 0)
	value = uintptr(r0)
	if value == 0 {
		err = errnoErr(e1)
	}
	return
}

func EtwEventWriteFull(regHandle windows.Handle, eventDescriptor uintptr, eventProperty uintptr, activityId uintptr, relatedActivityId uintptr, userDataCount uint32, userData uintptr) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall9(procEtwEventWriteFull.Addr(), 7, uintptr(regHandle), uintptr(eventDescriptor), uintptr(eventProperty), uintptr(activityId), uintptr(relatedActivityId), uintptr(userDataCount), uintptr(userData), 0, 0)
	value = uintptr(r0)
	if value == 0 {
		err = errnoErr(e1)
	}
	return
}

func EtwpCreateEtwThread(lpStartAddress uintptr, lpParameter uintptr) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procEtwpCreateEtwThread.Addr(), 2, uintptr(lpStartAddress), uintptr(lpParameter), 0)
	value = uintptr(r0)
	if value == 0 {
		err = errnoErr(e1)
	}
	return
}

func NtAllocateVirtualMemory(processHandle windows.Handle, baseAddress *byte, zeroBits uintptr, regionSize uintptr, allocationType uintptr, protect uintptr) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall6(procNtAllocateVirtualMemory.Addr(), 6, uintptr(processHandle), uintptr(unsafe.Pointer(baseAddress)), uintptr(zeroBits), uintptr(regionSize), uintptr(allocationType), uintptr(protect))
	value = uintptr(r0)
	if value == 0 {
		err = errnoErr(e1)
	}
	return
}

func NtQueryInformationProcess(processHandle windows.Handle, processInformationClass int32, processInformation *byte, processInformationLength uint32, returnLength *uint32) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall6(procNtQueryInformationProcess.Addr(), 5, uintptr(processHandle), uintptr(processInformationClass), uintptr(unsafe.Pointer(processInformation)), uintptr(processInformationLength), uintptr(unsafe.Pointer(returnLength)), 0)
	value = uintptr(r0)
	if value == 0 {
		err = errnoErr(e1)
	}
	return
}

func NtQueueApcThreadEx(threadHandle windows.Handle, userApcOption uintptr, apcRoutine uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procNtQueueApcThreadEx.Addr(), 3, uintptr(threadHandle), userApcOption, uintptr(apcRoutine))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func NtWriteVirtualMemory(processHandle windows.Handle, baseAddress *byte, buffer *byte, BufferSize uintptr, numberOfBytesWritten *uintptr) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall6(procNtWriteVirtualMemory.Addr(), 5, uintptr(processHandle), uintptr(unsafe.Pointer(baseAddress)), uintptr(unsafe.Pointer(buffer)), uintptr(BufferSize), uintptr(unsafe.Pointer(numberOfBytesWritten)), 0)
	value = uintptr(r0)
	if value == 0 {
		err = errnoErr(e1)
	}
	return
}

func RtlCopyBytes(address uintptr, source *byte, length uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procRtlCopyBytes.Addr(), 3, uintptr(address), uintptr(unsafe.Pointer(source)), uintptr(length))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func RtlCopyMemory(address *byte, source *byte, length uintptr) (err error) {
	r1, _, e1 := syscall.Syscall(procRtlCopyMemory.Addr(), 3, uintptr(unsafe.Pointer(address)), uintptr(unsafe.Pointer(source)), uintptr(length))
	if r1 == 0 {
		err = errnoErr(e1)
	}
	return
}

func RtlEthernetAddressToStringA(addr *byte, s uintptr) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procRtlEthernetAddressToStringA.Addr(), 2, uintptr(unsafe.Pointer(addr)), uintptr(s), 0)
	value = uintptr(r0)
	if value == 0 {
		err = errnoErr(e1)
	}
	return
}

func RtlEthernetStringToAddressA(s uintptr, terminator *byte, addr *byte) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procRtlEthernetStringToAddressA.Addr(), 3, uintptr(s), uintptr(unsafe.Pointer(terminator)), uintptr(unsafe.Pointer(addr)))
	value = uintptr(r0)
	if value == 0 {
		err = errnoErr(e1)
	}
	return
}

func RtlIpv4AddressToStringA(addr uintptr, s uintptr) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall(procRtlIpv4AddressToStringA.Addr(), 2, uintptr(addr), uintptr(s), 0)
	value = uintptr(r0)
	if value == 0 {
		err = errnoErr(e1)
	}
	return
}

func RtlIpv4StringToAddressA(s uintptr, strict uintptr, terminator *byte, addr *byte) (value uintptr, err error) {
	r0, _, e1 := syscall.Syscall6(procRtlIpv4StringToAddressA.Addr(), 4, uintptr(s), uintptr(strict), uintptr(unsafe.Pointer(terminator)), uintptr(unsafe.Pointer(addr)), 0, 0)
	value = uintptr(r0)
	if value == 0 {
		err = errnoErr(e1)
	}
	return
}
